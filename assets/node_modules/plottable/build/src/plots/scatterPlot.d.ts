import { Accessor, Point, Bounds, Range, AttributeToProjector } from "../core/interfaces";
import { Dataset } from "../core/dataset";
import { SymbolFactory } from "../core/symbolFactories";
import * as Drawers from "../drawers";
import { Scale } from "../scales/scale";
import { PlotEntity, LightweightPlotEntity, TransformableAccessorScaleBinding, AccessorScaleBinding } from "./";
import { XYPlot } from "./xyPlot";
export interface LightweightScatterPlotEntity extends LightweightPlotEntity {
    diameter: Point;
}
export declare class Scatter<X, Y> extends XYPlot<X, Y> {
    private static _SIZE_KEY;
    private static _SYMBOL_KEY;
    /**
     * A Scatter Plot draws a symbol at each data point.
     *
     * @constructor
     */
    constructor();
    protected _buildLightweightPlotEntities(datasets: Dataset[]): LightweightScatterPlotEntity[];
    protected _createDrawer(dataset: Dataset): Drawers.Symbol;
    /**
     * Gets the AccessorScaleBinding for the size property of the plot.
     * The size property corresponds to the area of the symbol.
     */
    size<S>(): TransformableAccessorScaleBinding<S, number>;
    /**
     * Sets the size property to a constant number or the result of an Accessor<number>.
     *
     * @param {number|Accessor<number>} size
     * @returns {Plots.Scatter} The calling Scatter Plot.
     */
    size(size: number | Accessor<number>): this;
    /**
     * Sets the size property to a scaled constant value or scaled result of an Accessor.
     * The provided Scale will account for the values when autoDomain()-ing.
     *
     * @param {S|Accessor<S>} sectorValue
     * @param {Scale<S, number>} scale
     * @returns {Plots.Scatter} The calling Scatter Plot.
     */
    size<S>(size: S | Accessor<S>, scale: Scale<S, number>): this;
    /**
     * Gets the AccessorScaleBinding for the symbol property of the plot.
     * The symbol property corresponds to how the symbol will be drawn.
     */
    symbol(): AccessorScaleBinding<any, any>;
    /**
     * Sets the symbol property to an Accessor<SymbolFactory>.
     *
     * @param {Accessor<SymbolFactory>} symbol
     * @returns {Plots.Scatter} The calling Scatter Plot.
     */
    symbol(symbol: Accessor<SymbolFactory>): this;
    protected _generateDrawSteps(): Drawers.DrawStep[];
    protected _entityVisibleOnPlot(entity: LightweightScatterPlotEntity, bounds: Bounds): boolean;
    protected _propertyProjectors(): AttributeToProjector;
    /**
     * Gets the Entities that intersect the Bounds.
     *
     * @param {Bounds} bounds
     * @returns {PlotEntity[]}
     */
    entitiesIn(bounds: Bounds): PlotEntity[];
    /**
     * Gets the Entities that intersect the area defined by the ranges.
     *
     * @param {Range} xRange
     * @param {Range} yRange
     * @returns {PlotEntity[]}
     */
    entitiesIn(xRange: Range, yRange: Range): PlotEntity[];
    /**
     * Gets the Entities at a particular Point.
     *
     * @param {Point} p
     * @returns {PlotEntity[]}
     */
    entitiesAt(p: Point): PlotEntity[];
    /**
     * _invertedPixelSize returns the size of the object in data space
     * @param {Point} [point] The size of the object in pixel space. X corresponds to
     * the width of the object, and Y corresponds to the height of the object
     * @return {Point} Returns the size of the object in data space. X corresponds to
     * the width of the object in data space, and Y corresponds to the height of the
     * object in data space.
     */
    private _invertedPixelSize(point);
}
