/**
 * Copyright 2017-present Palantir Technologies, Inc. All rights reserved.
 * Licensed under the MIT License (the "License"); you may obtain a copy of the
 * license at https://github.com/palantir/svg-typewriter/blob/develop/LICENSE
 */
"use strict";
var d3 = require("d3");
var Utils = require("../utils");
var Writer = (function () {
    function Writer(measurer, wrapper) {
        this._writerID = Writer.nextID++;
        this._elementID = 0;
        this.measurer(measurer);
        if (wrapper) {
            this.wrapper(wrapper);
        }
        this.addTitleElement(false);
    }
    Writer.prototype.measurer = function (newMeasurer) {
        this._measurer = newMeasurer;
        return this;
    };
    Writer.prototype.wrapper = function (newWrapper) {
        this._wrapper = newWrapper;
        return this;
    };
    Writer.prototype.addTitleElement = function (add) {
        this._addTitleElement = add;
        return this;
    };
    Writer.prototype.write = function (text, width, height, options) {
        if (Writer.SupportedRotation.indexOf(options.textRotation) === -1) {
            throw new Error("unsupported rotation - " + options.textRotation);
        }
        var orientHorizontally = Math.abs(Math.abs(options.textRotation) - 90) > 45;
        var primaryDimension = orientHorizontally ? width : height;
        var secondaryDimension = orientHorizontally ? height : width;
        var textContainer = options.selection.append("g").classed("text-container", true);
        if (this._addTitleElement) {
            textContainer.append("title").text(text);
        }
        var normalizedText = Utils.StringMethods.combineWhitespace(text);
        var textArea = textContainer.append("g").classed("text-area", true);
        var wrappedText = this._wrapper ?
            this._wrapper.wrap(normalizedText, this._measurer, primaryDimension, secondaryDimension).wrappedText : normalizedText;
        this.writeText(wrappedText, textArea, primaryDimension, secondaryDimension, options.xAlign, options.yAlign);
        var xForm = d3.transform("");
        var xForm2 = d3.transform("");
        xForm.rotate = options.textRotation;
        switch (options.textRotation) {
            case 90:
                xForm.translate = [width, 0];
                xForm2.rotate = -90;
                xForm2.translate = [0, 200];
                break;
            case -90:
                xForm.translate = [0, height];
                xForm2.rotate = 90;
                xForm2.translate = [width, 0];
                break;
            case 180:
                xForm.translate = [width, height];
                xForm2.translate = [width, height];
                xForm2.rotate = 180;
                break;
            default:
                break;
        }
        textArea.attr("transform", xForm.toString());
        this.addClipPath(textContainer, xForm2);
        if (options.animator) {
            options.animator.animate(textContainer);
        }
    };
    Writer.prototype.writeLine = function (line, g, width, xAlign, yOffset) {
        var textEl = g.append("text");
        textEl.text(line);
        var xOffset = width * Writer.XOffsetFactor[xAlign];
        var anchor = Writer.AnchorConverter[xAlign];
        textEl.attr("text-anchor", anchor).classed("text-line", true);
        Utils.DOM.transform(textEl, xOffset, yOffset).attr("y", "-0.25em");
    };
    Writer.prototype.writeText = function (text, writingArea, width, height, xAlign, yAlign) {
        var _this = this;
        var lines = text.split("\n");
        var lineHeight = this._measurer.measure().height;
        var yOffset = Writer.YOffsetFactor[yAlign] * (height - lines.length * lineHeight);
        lines.forEach(function (line, i) {
            _this.writeLine(line, writingArea, width, xAlign, (i + 1) * lineHeight + yOffset);
        });
    };
    Writer.prototype.addClipPath = function (selection, _transform) {
        var elementID = this._elementID++;
        var prefix = /MSIE [5-9]/.test(navigator.userAgent) ? "" : document.location.href;
        prefix = prefix.split("#")[0]; // To fix cases where an anchor tag was used
        var clipPathID = "clipPath" + this._writerID + "_" + elementID;
        selection.select(".text-area").attr("clip-path", "url(\"" + prefix + "#" + clipPathID + "\")");
        var clipPathParent = selection.append("clipPath").attr("id", clipPathID);
        var bboxAttrs = Utils.DOM.getBBox(selection.select(".text-area"));
        var box = clipPathParent.append("rect");
        box.classed("clip-rect", true).attr({
            height: bboxAttrs.height,
            width: bboxAttrs.width,
            x: bboxAttrs.x,
            y: bboxAttrs.y,
        });
    };
    return Writer;
}());
Writer.nextID = 0;
Writer.SupportedRotation = [-90, 0, 180, 90];
Writer.AnchorConverter = {
    center: "middle",
    left: "start",
    right: "end",
};
Writer.XOffsetFactor = {
    center: 0.5,
    left: 0,
    right: 1,
};
Writer.YOffsetFactor = {
    bottom: 1,
    center: 0.5,
    top: 0,
};
exports.Writer = Writer;
//# sourceMappingURL=writer.js.map